[project]
name = "minestrone"
authors = [{name = "Adam Hill", email = "adam@adamghill.com"}]
dynamic = ["version", "description"]
license = { file = "LICENSE" }

[tool.poetry]
name = "minestrone"
version = "0.7.0"
description = "Search, modify, and parse messy HTML with ease."
authors = ["adamghill <adam@adamghill.com>"]
license = "MIT"
readme = "README.md"
repository = "https://github.com/adamghill/minestrone/"
homepage = "https://github.com/adamghill/minestrone/"
documentation = "http://minestrone.readthedocs.io/"
keywords = ["python", "html", "beautifulsoup"]

[tool.poetry.urls]
"Funding" = "https://github.com/sponsors/adamghill"

[tool.poetry.dependencies]
python = ">=3.7,<4.0.0"
beautifulsoup4 = "^4.10.0"

# optional parsers
lxml = { version = "4.9.1", optional = true }
html5lib = { version = "1.1", optional = true }

# docs
Sphinx = { version = "^4.3.2", optional = true }
linkify-it-py = { version = "^1.0.3", optional = true }
myst-parser = { version = "^0.16.1", optional = true }
furo = { version = "^2021.11.23", optional = true }
sphinx-copybutton = { version = "^0.4.0", optional = true }
attrs = { version = "^21.4.0", optional = true }
toml = { version = "*", optional = true }

[tool.poetry.group.dev.dependencies]
pytest = "^6"
black = "^22"
isort = "^5"
sphinx-autobuild = "^2021.3.14"
types-beautifulsoup4 = "^4"
mypy = "^0"
coverage = {extras = ["toml"], version = "^6.2"}
pytest-cov = "^3"
ruff = "^0"
pytest-benchmark = "^4.0.0"

[tool.poetry.extras]
docs = ["Sphinx", "linkify-it-py", "myst-parser", "furo", "sphinx-copybutton", "toml", "attrs"]
lxml = ["lxml"]
html5 = ["html5lib"]

[tool.black]
line-length = 88

[tool.isort]
profile = "black"
multi_line_output = 3

[tool.pytest.ini_options]
addopts = "--quiet --failed-first -p no:warnings --benchmark-skip"
testpaths = [
    "tests"
]

[tool.ruff]
line-length = 88
select = ["E", "F"]
ignore = []
extend-select = ["D"]
extend-ignore = [
    "D101",
    "D102",
    "D103",
    "D105",
    "D106",
    "D202",
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
    "D100",
]

[tool.coverage.run]
branch = true
parallel = true

[tool.coverage.report]
show_missing = true
skip_covered = true
skip_empty = true

[tool.poe.tasks]
t = { cmd = "pytest", help = "Run tests" }
tc = { cmd = "pytest --cov=minestrone", help = "Run tests with coverage" }
r = { cmd = "coverage report", help = "Show coverage report" }
my = { cmd = "mypy .", help = "Run mypy" }
b = { cmd = "black . --check --quiet", help = "Run black" }
i = { cmd = "isort . --check --quiet", help = "Run isort" }
tm = ["b", "i", "t", "my"]
sa = { cmd = "sphinx-autobuild -W docs/source docs/build", help = "Sphinx autobuild" }
sb = { cmd = "sphinx-build -W docs/source docs/build", help = "Build documentation" }
publish = { shell = "poetry publish --build -r test && poetry publish" }

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
